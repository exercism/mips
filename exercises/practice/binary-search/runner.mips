#
# Test find with some examples
#
# a0 - address of input haystack, for callee
# a1 - haystack size, for callee
# a2 - needle value, for callee
# s0 - num of tests left to run
# s1 - address of input haystack
# s2 - address of haystack size
# s3 - address of needle value
# s4 - address of expected output
# s5 - expected output
# s6 - address of end of input haystack

.data

# number of test cases
n:  .word 11
# haystack elements (word sized ints)
haystacks:  .word
        6,
        1, 3, 4, 6, 8, 9, 11,
        1, 3, 4, 6, 8, 9, 11,
        1, 3, 4, 6, 8, 9, 11,
        1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634,
        1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,
        1, 3, 4, 6, 8, 9, 11,
        1, 3, 4, 6, 8, 9, 11,
        1, 3, 4, 6, 8, 9, 11,
        # none,
        1, 2
# haystack sizes (word sized ints)
sizes:  .word
        1,
        7,
        7,
        7,
        13,
        12,
        7,
        7,
        7,
        0,
        2
# needle values (word sized ints)
needles:  .word
        6,
        6,
        1,
        11,
        144,
        21,
        7,
        0,
        13,
        1,
        0
# expected output values (word sized ints)
outs:  .word
        0,
        3,
        0,
        6,
        9,
        5,
        -1,
        -1,
        -1,
        -1,
        -1

failmsg: .asciiz "failed search for "
inmsg: .asciiz " in ["
commamsg: .asciiz ", "
expectedmsg: .asciiz "]. expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"


.text

runner:
        lw      $s0, n
        la      $s1, haystacks
        la      $s2, sizes
        la      $s3, needles
        la      $s4, outs

run_test:
        move    $a0, $s1                # load input haystack address into a0
        lw      $a1, 0($s2)             # load haystack size into a1
        sll     $s6, $a1, 2             # calculate haystack size in bytes
        add     $s6, $s1, $s6           # calculate end of haystack
        lw      $a2, 0($s3)             # load needle value into a2
        jal     find                    # call subroutine under test
        move    $v1, $v0                # move return value in v0 to v1 because we need v0 for syscall
        lw      $s5, 0($s4)             # load expected output
        bne     $v0, $s5, exit_fail     # if the actual output differs, the test has failed

done_check:
        move    $s1, $s6                # point to next haystack
        addi    $s2, $s2, 4             # point to next haystack size
        addi    $s3, $s3, 4             # point to next needle value
        addi    $s4, $s4, 4             # point to next expected output
        subi    $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s3)             # load needle value that failed on
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, inmsg
        li      $v0, 4
        syscall
        beq     $s1, $s6, print_expected
        j       print_element

print_comma:
        la      $a0, commamsg
        li      $v0, 4
        syscall

print_element:
        lw      $a0, 0($s1)             # load haystack element that failed on
        li      $v0, 1                  # 1 is print integer
        syscall
        addi    $s1, $s1, 4             # advance to next element
        bne     $s1, $s6, print_comma

print_expected:
        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $v1                # print actual that failed on
        li      $v0, 1
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # print expected value that failed on
        li      $v0, 1
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
