#
# Test solution
#
# s1 - address of expected output
# s2 - address where output is copied

.data

# expected output value
outs: .asciiz "N, J"

failmsg: .asciiz "test failed: "
expectedmsg: .asciiz "expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"

.eqv BUFFER_SIZE 5

.text

runner:
        la      $s1, outs
        li      $v0, 9                  # code for allocating heap memory
        li      $a0, BUFFER_SIZE
        syscall
        move    $s2, $v0

run_test:
        jal     solution                # call subroutine under test
        li      $t0, ','
        li      $t1, ' '
        sb      $v0, 0($s2)
        sb      $t0, 1($s2)
        sb      $t1, 2($s2)
        sb      $v1, 3($s2)
        sb      $zero, 4($s2)

        lb      $t0, 0($s1)
        lb      $t1, 3($s1)
        bne     $v0, $t0, exit_fail
        bne     $v1, $t1, exit_fail

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s2                # print actual that failed on
        li      $v0, 4                  # 1 is print string
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s1                # print expected value that failed on
        li      $v0, 4                  # 1 is print string
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
