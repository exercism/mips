#
# Test commands with some examples
#
# a0 - input word, for callee
# a1 - pointer to output string, for callee
# s0 - num of tests left to run
# s1 - address of input word
# s2 - address of expected output string
# s3 - char byte of expected output
# s4 - char byte of actual output
# s5 - copy of output location
#
# commands must:
# - be named commands and declared as global
# - read input value from a0
# - follow the convention of using the t0-9 registers for temporary storage
# - (if it uses s0-7 then it is responsible for pushing existing values to the stack then popping them back off before returning)
# - write a zero-terminated string representing the return value to address given in a1

.data

# number of test cases
n:  .word 11
# input values (word sized ints)
ins:  .word
        1,
        2,
        4,
        8,
        3,
        19,
        24,
        16,
        15,
        31,
        0
# expected output values (null terminated)
outs:  .asciiz
        "wink",
        "double blink",
        "close your eyes",
        "jump",
        "wink, double blink",
        "double blink, wink",
        "jump",
        "",
        "wink, double blink, close your eyes, jump",
        "jump, close your eyes, double blink, wink",
        ""

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"


.text

runner:
        lw      $s0, n
        la      $s1, ins
        la      $s2, outs

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, 44                 # specify 44 bytes - length of longest expected output
        syscall
        move    $a1, $v0                # location of allocated memory is where callee writes result
        move    $s5, $v0                # also keep a copy for ourselves

run_test:
        jal     clear_output            # zero out output location

        lw      $a0, 0($s1)             # load input value into a0
        move    $a1, $s5                # load output address
        jal     commands                # call subroutine under test

        move    $t0, $s5                # set a temporary pointer to allocated memory 
        move    $s7, $s2                # copy pointer to current expected output string
scan:
        lb      $s3, 0($s2)             # load one byte of the expectation
        lb      $s4, 0($t0)             # load one byte of the actual
        bne     $s3, $s4, exit_fail     # if the two differ, the test has failed
        addi    $s2, $s2, 1             # point to next expectation byte
        addi    $t0, $t0, 1             # point to next actual byte
        bne     $s3, $zero, scan        # if one char (and therefore the other) was not null, loop

done_scan:
        addi    $s1, $s1, 4             # point to next input word
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s1)             # print input that failed on
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # print actual that failed on
        li      $v0, 4
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s7                # print expected value that failed on
        li      $v0, 4
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall

clear_output:
                                        # zero out output by storing 44 bytes of zeros
        addi    $t0, $s5, 44            # pointer to end of output buffer

clear:
        subi    $t0, $t0, 4             # decrement pointer
        sw      $zero, 0($t0)           # store a 0 word
        bne     $t0, $s5, clear         # repeat util we have reached the start of the buffer
        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
