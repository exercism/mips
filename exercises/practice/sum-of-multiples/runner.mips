#
# Test sum with some examples
#
# | Register | Type    | Description                       |
# | -------- | ------- | --------------------------------- |
# | `$a0`    | address | array of factor words, for callee |
# | `$a1`    | integer | number of factors, for callee     |
# | `$a2`    | integer | limit, for callee                 |
# | `$v0`    | integer | sum of multiples within limit     |
# | `$v1`    | integer | copy of v0                        |
# | `$s0`    | integer | number of tests remaining         |
# | `$s1`    | address | address of factors                |
# | `$s2`    | address | address for number of factors     |
# | `$s3`    | address | address for limits                |
# | `$s4`    | address | address for expected outputs      |
# | `$s5`    | integer | expected output                   |

.data

# number of test cases
n:  .word 16
factors:  .word
        3, 5,
        3, 5,
        3,
        3, 5,
        3, 5,
        3, 5,
        7, 13, 17,
        4, 6,
        5, 6, 8,
        5, 25,
        43, 47,
        1,
        # none,
        0,
        3, 0,
        2, 3, 5, 7, 11
numfactors:  .word
        2,
        2,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        2,
        2,
        1,
        0,
        1,
        2,
        5
limits:  .word
        1,
        4,
        7,
        10,
        100,
        1000,
        20,
        15,
        150,
        51,
        10000,
        100,
        10000,
        1,
        4,
        10000
outs:  .word
        0,
        3,
        9,
        23,
        2318,
        233168,
        51,
        30,
        4419,
        275,
        2203160,
        4950,
        0,
        0,
        3,
        39614537

failmsg: .asciiz "failed sum for factors "
limitmsg: .asciiz ", limit "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"
prefix: .asciiz "["
comma: .asciiz ", "
suffix: .asciiz "]"


.text

runner:
        lw      $s0, n
        la      $s1, factors
        la      $s2, numfactors
        la      $s3, limits
        la      $s4, outs

run_test:
        move    $a0, $s1                # address of factors
        lw      $a1, 0($s2)             # load num factors into a1
        lw      $a2, 0($s3)             # load limit into a2
        jal     sum                     # call subroutine under test
        move    $v1, $v0                # move return value in v0 to v1 because we need v0 for syscall
        lw      $s5, 0($s4)             # load expected output
        bne     $v0, $s5, exit_fail     # if the actual output differs, the test has failed

done_check:
        lw      $a1, 0($s2)             # load num factors into a1
        sll     $a1, $a1, 2             # size of factors in bytes
        add     $s1, $s1, $a1           # address of next factors
        addi    $s2, $s2, 4             # point to next num factors
        addi    $s3, $s3, 4             # point to next limit
        addi    $s4, $s4, 4             # point to next expected output
        subi    $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # address of factors
        lw      $a1, 0($s2)             # load num factors into a1
        jal print_array

        la      $a0, limitmsg           # put address of limitmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s3)             # load limit into a0
        li      $v0, 1                  # 1 is print int
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $v1                # print actual that failed on
        li      $v0, 1
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # print expected value that failed on
        li      $v0, 1
        syscall

        li      $a0, 1                  # set exit code to 1
        li      $v0, 17                 # terminate with the exit code in $a0
        syscall


print_array:
                                        # print array with address $a0, word count $a1
                                        # local variable s0 points to current element
                                        # local variable s1 points to end of array

        addi    $sp, $sp, -8            # Save existing values of $s0 and $s1
        sw      $s0, 4($sp)
        sw      $s1, 0($sp)

        move    $s0, $a0                # first element of array
        sll     $s1, $a1, 2             # length of array, in bytes
        add     $s1, $a0, $s1           # pointer to end of array

        la      $a0, prefix             # print prefix
        li      $v0, 4
        syscall

        beq     $s0, $s1, output_suffix # jump ahead if array is empty
        j       output_element          # first element is not preceeded by comma

output_comma:
        la      $a0, comma
        li      $v0, 4
        syscall

output_element:
        lw      $a0, 0($s0)             # load element value
        addi    $s0, $s0, 4             # increment pointer
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        bne     $s0, $s1, output_comma  # repeat until we reach end of array

output_suffix:
        la      $a0, suffix
        li      $v0, 4
        syscall

        lw      $s1, 0($sp)             # Restore original values of $s0 and $s1
        lw      $s0, 4($sp)
        addi    $sp, $sp, 8

        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
