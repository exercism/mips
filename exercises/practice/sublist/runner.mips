#
# Test sublist with some examples
#
# a0 - array one elements
# a1 - size of array one, in words
# a2 - array two elements
# a3 - size of array two, in words
# v0 - output `0` = unequal, `1` = equal, `2` = sublist, `3` = superlist
# v1 - copy of output
# s0 - num of tests left to run
# s1 - address of array one elements
# s2 - address of size of array one
# s3 - address of array two elements
# s4 - address of size of array two
# s5 - address of expected output
# s6 - expected output

.data

# number of test cases
n:  .word 18
# array one elements (word sized ints)
ins1:  .word
        # none,
        # none,
        1, 2, 3,
        1, 2, 3,
        1, 2, 3,
        1, 2, 5,
        1, 1, 2,
        0, 1, 2,
        2, 3, 4,
        3, 4, 5,
        0, 1, 2, 3, 4, 5,
        0, 1, 2, 3, 4, 5,
        0, 1, 2, 3, 4, 5,
        1, 3,
        1, 2, 3,
        1, 2,
        1, 2, 3,
        1, 0, 1
# size of array one (word sized ints)
numins1:  .word
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        6,
        6,
        6,
        2,
        3,
        2,
        3,
        3
# array two elements (word sized ints)
ins2:  .word
        # none,
        1, 2, 3,
        # none,
        1, 2, 3,
        2, 3, 4,
        0, 1, 2, 3, 1, 2, 5, 6,
        0, 1, 1, 1, 2, 1, 2,
        0, 1, 2, 3, 4, 5,
        0, 1, 2, 3, 4, 5,
        0, 1, 2, 3, 4, 5,
        0, 1, 2,
        2, 3,
        3, 4, 5,
        1, 2, 3,
        1, 3,
        1, 22,
        3, 2, 1,
        10, 1
# size of array two (word sized ints)
numins2:  .word
        0,
        3,
        0,
        3,
        3,
        8,
        7,
        6,
        6,
        6,
        3,
        2,
        3,
        3,
        2,
        2,
        3,
        2
# expected output values (word sized ints)
outs:  .word
        1, # equal,
        2, # sublist,
        3, # superlist,
        1, # equal,
        0, # unequal,
        2, # sublist,
        2, # sublist,
        2, # sublist,
        2, # sublist,
        2, # sublist,
        3, # superlist,
        3, # superlist,
        3, # superlist,
        0, # unequal,
        0, # unequal,
        0, # unequal,
        0, # unequal,
        0  # unequal

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"
prefix: .asciiz "["
comma: .asciiz ", "
suffix: .asciiz "]"


.text

runner:
        lw      $s0, n
        la      $s1, ins1
        la      $s2, numins1
        la      $s3, ins2
        la      $s4, numins2
        la      $s5, outs

run_test:
        move    $a0, $s1                # load array one elements address into a0
        lw      $a1, 0($s2)             # load array one size into a1
        move    $a2, $s3                # load array two elements address into a2
        lw      $a3, 0($s4)             # load array two size into a3
        jal     sublist                 # call subroutine under test
        move    $v1, $v0                # move return value in v0 to v1 because we need v0 for syscall
        lw      $s6, 0($s5)             # load expected output
        bne     $v0, $s6, exit_fail     # if the actual output differs, the test has failed

done_check:
        lw      $a1, 0($s2)             # load array one size into a1
        sll     $a1, $a1, 2             # array one size in bytes
        add     $s1, $s1, $a1           # address of next array one elements
        addi    $s2, $s2, 4             # point to next array one size

        lw      $a3, 0($s4)             # load array two size into a3
        sll     $a3, $a3, 2             # array two size in bytes
        add     $s3, $s3, $a3           # address of next array two elements
        addi    $s4, $s4, 4             # point to next array two size

        addi    $s5, $s5, 4             # point to next expected output
        subi    $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # load array one elements address
        lw      $a1, 0($s2)             # load array one size
        jal print_array

        la      $a0, comma
        li      $v0, 4
        syscall

        move    $a0, $s3                # load array two elements address
        lw      $a1, 0($s4)             # load array two size
        jal print_array

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $v1                # print actual that failed on
        li      $v0, 1
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s6                # print expected value that failed on
        li      $v0, 1
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


print_array:
                                        # print array with address $a0, word count $a1
                                        # local variable s0 points to current element
                                        # local variable s1 points to end of array

        addi    $sp, $sp, -8            # Save existing values of $s0 and $s1
        sw      $s0, 4($sp)
        sw      $s1, 0($sp)

        move    $s0, $a0                # first element of array
        sll     $s1, $a1, 2             # length of array, in bytes
        add     $s1, $a0, $s1           # pointer to end of array

        la      $a0, prefix             # print prefix
        li      $v0, 4
        syscall

        beq     $s0, $s1, output_suffix # jump ahead if array is empty
        j       output_element          # first element is not preceeded by comma

output_comma:
        la      $a0, comma
        li      $v0, 4
        syscall

output_element:
        lw      $a0, 0($s0)             # load element value
        addi    $s0, $s0, 4             # increment pointer
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        bne     $s0, $s1, output_comma  # repeat until we reach end of array

output_suffix:
        la      $a0, suffix
        li      $v0, 4
        syscall

        lw      $s1, 0($sp)             # Restore original values of $s0 and $s1
        lw      $s0, 4($sp)
        addi    $sp, $sp, 8

        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
