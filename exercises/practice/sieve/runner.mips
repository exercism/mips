#
# Test primes with some examples
#
# a0 - input limit, for callee
# a1 - pointer to output array of prime numbers, for callee
# s0 - num of tests left to run
# s1 - address of input limit
# s2 - address of expected prime numbers
# s3 - address of expected number of primes
# s4 - copy of output location
# t0 - address of expected prime
# t1 - expected prime
# t2 - address of actual prime
# t3 - actual prime
# t4 - address at end of expected prime numbers

.eqv BUFFER_SIZE 800

.data

# number of test cases
n:  .word 5
ins:  .word
        1,
        2,
        10,
        13,
        1000
outs:  .word
        # none,
        2,
        2, 3, 5, 7,
        2, 3, 5, 7, 11, 13,
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
        71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
        149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
        227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
        307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,
        389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
        467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
        571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,
        653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
        751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
        853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
        947, 953, 967, 971, 977, 983, 991, 997
numouts:  .word
        0,
        1,
        4,
        6,
        168

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"
prefix: .asciiz "["
comma: .asciiz ", "
suffix: .asciiz "]"


.text

runner:
        lw      $s0, n
        la      $s1, ins
        la      $s2, outs
        la      $s3, numouts

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, BUFFER_SIZE        # specify length of longest expected output
        syscall
        move    $s4, $v0                # location of allocated memory is where callee writes result

run_test:
        jal     clear_output            # zero out output location

        lw      $a0, 0($s1)             # load input value into a0
        move    $a1, $s4                # load output location
        jal     primes                  # call subroutine under test
        move    $v1, $v0                # move return value in v0 to v1 because we need v0 for syscall
        lw      $t5, 0($s3)             # expected number of primes
        bne     $v1, $t5, exit_fail     # check if we have the expected number of primes

        move    $t0, $s2                # address of expected prime
        move    $t2, $s4                # address of actual primes
        sll     $t4, $t5, 2             # number of bytes occupied by prime numbers
        add     $t4, $t4, $s2           # address at end of expected prime numbers
        beq     $t5, $zero, done_scan

scan:
        lw      $t1, 0($t0)             # load expected prime
        lw      $t3, 0($t2)             # load actual prime
        bne     $t1, $t3, exit_fail     # check if we have the expected prime
        addi    $t0, $t0, 4             # advance to next expected prime
        addi    $t2, $t2, 4             # advance to next actual prime
        bne     $t0, $t4, scan          # repeat until all prime numbers have been compared

done_scan:
        addi    $s1, $s1, 4             # point to next input word
        move    $s2, $t4                # point to next expected prime numbers
        addi    $s3, $s3, 4             # point to next expected number of primes
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s1)             # print input that failed on
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $v1                # actual number of primes
        move    $a1, $s4                # address of actual prime numbers
        jal     print_array

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        lw      $a0, 0($s3)             # expected number of primes
        move    $a1, $s2                # address of expected prime numbers
        jal     print_array

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


clear_output:
                                        # zero out output by storing zeros
        addi    $t0, $s4, BUFFER_SIZE   # pointer to end of output buffer

clear:
        subi    $t0, $t0, 4             # decrement pointer
        sw      $zero, 0($t0)           # store a 0 word
        bne     $t0, $s4, clear         # repeat util we have reached the start of the buffer
        jr      $ra


print_array:
                                        # print array with word count $a0, address $a1
                                        # local variable s0 points to current element
                                        # local variable s1 point to end of array

        addi    $sp, $sp, -8            # Save existing values of $s0 and $s1
        sw      $s0, 4($sp)
        sw      $s1, 0($sp)

        move    $s0, $a1                # first element of array
        sll     $s1, $a0, 2             # length of array, in bytes
        add     $s1, $s1, $a1           # pointer to end of array

        la      $a0, prefix             # print prefix
        li      $v0, 4
        syscall

        beq     $s0, $s1, output_suffix # jump ahead if array is empty
        j       output_element          # first element is not preceeded by comma

output_comma:
        la      $a0, comma
        li      $v0, 4
        syscall

output_element:
        lw      $a0, 0($s0)             # load element value
        addi    $s0, $s0, 4             # increment pointer
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        bne     $s0, $s1, output_comma  # repeat until we reach end of array

output_suffix:
        la      $a0, suffix
        li      $v0, 4
        syscall

        lw      $s1, 0($sp)             # Restore original values of $s0 and $s1
        lw      $s0, 4($sp)
        addi    $sp, $sp, 8

        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
