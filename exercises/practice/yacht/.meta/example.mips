# | Register | Usage     | Type    | Description                                                |
# | -------- | --------- | ------- | ---------------------------------------------------------- |
# | `$a0`    | input     | integer | category: `0` = choice, `1` = ones, `2` = twos, `3` = threes, `4` = fours, `5` = fives, `6` = sixes, `7` = little_straight, `8` = big_straight, `9` = full_house, `10` = four_of_a_kind, `11` = yacht |
# | `$a1`    | input     | address | dice (word array)                                          |
# | `$v0`    | output    | integer | resulting score                                            |
# | `$t0-9`  | temporary | any     | used for temporary storage                                 |

.eqv CHOICE 0
.eqv ONES 1
.eqv TWOS 2
.eqv THREES 3
.eqv FOURS 4
.eqv FIVES 5
.eqv SIXES 6
.eqv LITTLE_STRAIGHT 7
.eqv BIG_STRAIGHT 8
.eqv FULL_HOUSE 9
.eqv FOUR_OF_A_KIND 10
.eqv YACHT 11


.globl score

score:
        addi    $a2, $a1, 20            # end of dice array
        move    $t0, $zero              # total of dice
        move    $t1, $zero              # value counts
        li      $t6, 1

.read:
        lw      $t2, 0($a1)             # read value from dice
        addi    $a1, $a1, 4             # increment input pointer
        add     $t0, $t0, $t2           # update total
        sll     $t2, $t2, 2             # multiply by 4
        sllv    $t3, $t6, $t2           # 1 << (4 * value)
        add     $t1, $t1, $t3
        bne     $a1, $a2, .read

        move    $t3, $zero
        beqz    $a0, .total             # CHOICE

        li      $t4, LITTLE_STRAIGHT
        beq     $a0, $t4, .little_straight

        li      $t4, BIG_STRAIGHT
        beq     $a0, $t4, .big_straight

        li      $t5, 0x001100           # Three of one number and two of another
        li      $t4, FULL_HOUSE
        beq     $a0, $t4, .match

        li      $t4, FOUR_OF_A_KIND
        beq     $a0, $t4, .four_of_a_kind

        li      $t5, 0x100000           # All five dice showing the same face
        li      $t4, YACHT
        beq     $a0, $t4, .match

                                        # ONES TWOS THREES FOURS FIVES SIXES
        sll     $a3, $a0, 2
        srlv    $t1, $t1, $a3
        andi    $t1, $t1, 0xf           # number of dice with required value
        mul     $v0, $a0, $t1
        jr      $ra

.match:
        srl     $t1, $t1, 4
        andi    $t2, $t1, 0xf
        sll     $t2, $t2, 2             # multiply by 4
        sllv    $t2, $t6, $t2           # 1 << (4 * count)
        add     $t3, $t3, $t2
        bnez    $t1, .match

        and     $t3, $t3, $t5
        bne     $t3, $t5, .zero

        li      $t3, YACHT
        beq     $a0, $t3, .fifty

.total:
        move    $v0, $t0
        jr      $ra

.four_of_a_kind:
        srl     $t1, $t1, 4
        beqz    $t1, .zero              # no more counts

        andi    $t2, $t1, 0x4
        addi    $t3, $t3, 1             # value
        beqz    $t2, .four_of_a_kind    # loop as count is not 4

        sll     $v0, $t3, 2             # 4 * value
        jr      $ra

.little_straight:
        li      $t5, 0x0111110
        beq     $t1, $t5, .thirty

.zero:
        move    $v0, $zero
        jr      $ra

.big_straight:
        li      $t5, 0x1111100
        bne     $t1, $t5, .zero

.thirty:
        li      $v0, 30
        jr      $ra

.fifty:
        li      $v0, 50
        jr      $ra
