# | Register | Usage        | Type    | Description                   |
# | -------- | ------------ | ------- | ----------------------------- |
# | `$a0`    | input        | address | null-terminated name string   |
# | `$a1`    | input        | integer | number                        |
# | `$a2`    | input/output | address | null-terminated result string |
# | `$t0-9`  | temporary    | any     | for temporary storage         |

.globl format

.data

you: .asciiz ", you are the "
customer: .asciiz " customer we serve today. Thank you!"
th: .asciiz "th"
st: .asciiz "st"
nd: .asciiz "nd"
rd: .asciiz "rd"

.text

format:
        move    $t9, $ra                # preserve return address
        jal     copy_string             # Output name
        la      $a0, you
        jal     copy_string             # Output you...

        move    $t8, $a2                # preserve output pointer
        li      $t7, 10
        li      $t0, '0'
        li      $t1, '1'
        li      $t2, '2'
        li      $t3, '3'

digit:
        divu    $a1, $t7                # divide number by 10
        mflo    $a1                     # quotient
        mfhi    $t6                     # remainder
        add     $t6, $t6, $t0           # '0' .. '9'
        sb      $t6, 0($a2)
        addi    $a2, $a2, 1
        bnez    $a1, digit

        move    $t7, $a2

reverse:
        subi    $t7, $t7, 1
        beq     $t7, $t8, choose

        lb      $v0, 0($t8)
        lb      $v1, 0($t7)
        sb      $v0, 0($t7)
        sb      $v1, 0($t8)
        addi    $t8, $t8, 1
        bne     $t7, $t8, choose

choose:
        la      $a0, th
        lb      $t6, -2($a2)            # tens digit
        beq     $t6, $t1, suffix

        lb      $t6, -1($a2)            # units digit
        beq     $t6, $t1, first
        beq     $t6, $t2, second
        beq     $t6, $t3, third

suffix:
        jal     copy_string             # Output th or st or nd or rd
        la      $a0, customer
        jal     copy_string             # Output customer...
        jr      $t9                     # Return to original caller

first:
        la      $a0, st
        j       suffix

second:
        la      $a0, nd
        j       suffix

third:
        la      $a0, rd
        j       suffix


copy_string:
                                        # copy string from source $a0 to destination $a1
        lb      $v1, 0($a0)             # load source byte
        sb      $v1, 0($a2)             # write byte to destination
        addi    $a0, $a0, 1             # increment souce pointer
        addi    $a2, $a2, 1             # increment destination pointer
        bne     $v1, $zero, copy_string # repeat until we have reached null terminator

        addi    $a2, $a2, -1            # decrement destination pointer,
                                        # ready to append other strings
        jr      $ra
