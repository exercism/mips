# | Register | Usage     | Type    | Description                                       |
# | -------- | --------- | ------- | ------------------------------------------------- |
# | `$a0`    | input     | integer | starting number                                   |
# | `$v0`    | output    | integer | expected number of steps, -1 if number is invalid |
# | `$t0`    | temporary | integer | least significant bit of number                   |
# | `$t1`    | temporary | integer | (n+1)/2 when the number is odd                    |

.globl  steps

steps:
        ble     $a0, $zero, invalid     # negative numbers and zero are invalid
        move    $v0, $zero              # number of steps taken so far
        j       check_parity

even:
        srl     $a0, $a0, 1             # n becomes n/2
        addi    $v0, $v0, 1             # we have taken a step

check_parity:
        andi    $t0, $a0, 1             # select the least significant bit
        beq     $t0, $zero, even        # if it is zero, we have an even number

        beq     $a0, 1, return          # if our number is 1, we are finished

                                        # odd n becomes 3n+1, which is even and
                                        # itself becomes (3n+1)/2 == n + (n+1)/2

        addi    $t1, $a0, 1             # calculate n+1
        srl     $t1, $t1, 1             # calculate (n+1)/2
        add     $a0, $a0, $t1           # n becomes n + (n+1)/2
        addi    $v0, $v0, 2             # we have taken two steps
        j       check_parity

invalid:
        li      $v0, -1                 # report the number is invalid
return:
        jr      $ra
