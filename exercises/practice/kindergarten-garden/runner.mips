#
# Test plants with some examples
#
# a0 - input diagram string, for callee
# a1 - input student name string, for callee
# a2 - pointer to output string, for callee
# s0 - num of tests left to run
# s1 - address of input diagram string
# s2 - address of input student name string
# s3 - address of expected output string
# s4 - copy of output location

.eqv BUFFER_SIZE 40

.data

# number of test cases
n:  .word 17
# diagram values (null terminated)
diagrams:  .asciiz
        "RC\nGG\n",
        "VC\nRC\n",
        "VVCG\nVVRC\n",
        "VVCCGG\nVVCCGG\n",
        "VVCCGG\nVVCCGG\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n",
        "VRCGVVRVCGGCCGVRGCVCGCGV\nVRCCCGCRRGVCGCRVVCVGCGCV\n"
# student values (null terminated)
students:  .asciiz
        "Alice",
        "Alice",
        "Bob",
        "Bob",
        "Charlie",
        "Alice",
        "Bob",
        "Charlie",
        "David",
        "Eve",
        "Fred",
        "Ginny",
        "Harriet",
        "Ileana",
        "Joseph",
        "Kincaid",
        "Larry"
# expected output values (null terminated)
outs:  .asciiz
        "radishes, clover, grass, grass",
        "violets, clover, radishes, clover",
        "clover, grass, radishes, clover",
        "clover, clover, clover, clover",
        "grass, grass, grass, grass",
        "violets, radishes, violets, radishes",
        "clover, grass, clover, clover",
        "violets, violets, clover, grass",
        "radishes, violets, clover, radishes",
        "clover, grass, radishes, grass",
        "grass, clover, violets, clover",
        "clover, grass, grass, clover",
        "violets, radishes, radishes, violets",
        "grass, clover, violets, clover",
        "violets, clover, violets, grass",
        "grass, clover, clover, grass",
        "grass, violets, clover, violets"

failmsg: .asciiz "failed for test input:\n"
formsg: .asciiz " for "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"


.text

runner:
        lw      $s0, n
        la      $s1, diagrams
        la      $s2, students
        la      $s3, outs

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, BUFFER_SIZE        # specify length of longest expected output
        syscall
        move    $s4, $v0                # location of allocated memory is where callee writes result

run_test:
        jal     clear_output            # zero out output location
        move    $a0, $s1                # load input diagram into a0
        move    $a1, $s2                # load input student name into a1
        move    $a2, $s4                # load destination address into a2
        jal     plants                  # call subroutine under test
        move    $a2, $s4
        move    $s6, $s4                # take copy of output value
        move    $s7, $s3

scan:
        lb      $t0, 0($s3)             # load one byte of the expectation
        lb      $t1, 0($a2)             # load one byte of the actual
        bne     $t0, $t1, exit_fail     # if the two differ, the test has failed
        addi    $s3, $s3, 1             # point to next expectation byte
        addi    $a2, $a2, 1             # point to next actual byte
        bne     $t0, $zero, scan        # if one char (and therefore the other) was not null, loop

diagram_scan:
        lb      $t0, 0($s1)
        addi    $s1, $s1, 1
        bne     $t0, $zero, diagram_scan

student_scan:
        lb      $t0, 0($s2)
        addi    $s2, $s2, 1
        bne     $t0, $zero, student_scan

done_scan:
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # print diagram input that failed on
        li      $v0, 4
        syscall

        la      $a0, formsg             # put address of formsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s2                # print student input that failed on
        li      $v0, 4
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s6                # print actual that failed on
        li      $v0, 4
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s7                # print expected value that failed on
        li      $v0, 4
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


clear_output:
                                        # zero out output by storing zeros
        addi    $t0, $s4, BUFFER_SIZE   # pointer to end of output buffer

clear:
        subi    $t0, $t0, 4             # decrement pointer
        sw      $zero, 0($t0)           # store a 0 word
        bne     $t0, $s4, clear         # repeat util we have reached the start of the buffer
        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
