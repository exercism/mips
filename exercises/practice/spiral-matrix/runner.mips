#
# Test spiral_matrix with some examples
#
# a0 - input size, for callee
# a1 - pointer to output matrix, for callee
# s0 - num of tests left to run
# s1 - address of input size
# s2 - address of expected matrix
# s3 - address of expected number of matrix entries
# s4 - copy of output location
# s5 - expected number of entries
# s6 - address at end of expected matrix entries

.eqv BUFFER_SIZE 100

.data

# number of test cases
n:  .word 6
ins:  .word
        0,
        1,
        2,
        3,
        4,
        5
outs:  .word
        # none,

        1,

        1, 2,
        4, 3,

        1, 2, 3,
        8, 9, 4,
        7, 6, 5,

         1,  2,  3, 4,
        12, 13, 14, 5,
        11, 16, 15, 6,
        10,  9,  8, 7,

         1,  2,  3,  4, 5,
        16, 17, 18, 19, 6,
        15, 24, 25, 20, 7,
        14, 23, 22, 21, 8,
        13, 12, 11, 10, 9
numouts:  .word
        0,
        1,
        4,
        9,
        16,
        25

failmsg: .asciiz "failed for test input: "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"
prefix: .asciiz "["
comma: .asciiz ", "
suffix: .asciiz "]"


.text

runner:
        lw      $s0, n
        la      $s1, ins
        la      $s2, outs
        la      $s3, numouts

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, BUFFER_SIZE        # specify length of longest expected output
        syscall
        move    $s4, $v0                # location of allocated memory is where callee writes result

run_test:
        jal     clear_output            # zero out output location

        lw      $a0, 0($s1)             # load input value into a0
        move    $a1, $s4                # load output location
        jal     spiral_matrix           # call subroutine under test
        move    $v1, $v0                # move return value in v0 to v1 because we need v0 for syscall
        lw      $s5, 0($s3)             # expected number of entries
        sll     $s6, $s5, 2             # number of bytes occupied by entries
        add     $s6, $s2, $s6           # address at end of expected entries

        move    $a0, $s4                # actual output entries address
        move    $a1, $v1                # actual number of output entries
        move    $a2, $s2                # expected output entries address
        move    $a3, $s5                # expected number of output entries
        jal     check_list_match
        bnez    $v0, exit_fail

        addi    $s1, $s1, 4             # point to next input word
        move    $s2, $s6                # point to next expected entries
        addi    $s3, $s3, 4             # point to next expected number of entries
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s1)             # print input that failed on
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $v1                # actual number of entries
        move    $a1, $s4                # address of actual entries
        jal     print_array

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s5                # expected number of entries
        move    $a1, $s2                # address of expected entries
        jal     print_array

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


clear_output:
                                        # zero out output by storing zeros
        addi    $t0, $s4, BUFFER_SIZE   # pointer to end of output buffer

clear:
        subi    $t0, $t0, 4             # decrement pointer
        sw      $zero, 0($t0)           # store a 0 word
        bne     $t0, $s4, clear         # repeat util we have reached the start of the buffer
        jr      $ra


check_list_match:
                                        # checks if list with address $a0, word count $a1
                                        # exact match for list with address $a2, word count $a3
                                        # return 0 in $v0 iff the lists match
        bne     $a1, $a3, no_match      # if the actual output length differs, the lists do not match
        beqz    $a3, confirm_match

        move    $t1, $a1
        sll     $t1, $t1, 2             # number of bytes occupied by each list
        add     $t1, $a2, $t1           # end of second list

compare_digits:
        lw      $t0, 0($a0)             # load element from first list
        lw      $t2, 0($a2)             # load element from second list
        bne     $t0, $t2, no_match
        addi    $a0, $a0, 4             # advance pointer into first list
        addi    $a2, $a2, 4             # advance pointer into second list
        bne     $a2, $t1, compare_digits # repeat while there are more list elements

confirm_match:
        li      $v0, 0
        jr      $ra

no_match:
        li      $v0, 1
        jr      $ra


print_array:
                                        # print array with word count $a0, address $a1
                                        # local variable s0 points to current element
                                        # local variable s1 point to end of array

        addi    $sp, $sp, -8            # Save existing values of $s0 and $s1
        sw      $s0, 4($sp)
        sw      $s1, 0($sp)

        move    $s0, $a1                # first element of array
        sll     $s1, $a0, 2             # length of array, in bytes
        add     $s1, $s1, $a1           # pointer to end of array

        la      $a0, prefix             # print prefix
        li      $v0, 4
        syscall

        beq     $s0, $s1, output_suffix # jump ahead if array is empty
        j       output_element          # first element is not preceeded by comma

output_comma:
        la      $a0, comma
        li      $v0, 4
        syscall

output_element:
        lw      $a0, 0($s0)             # load element value
        addi    $s0, $s0, 4             # increment pointer
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        bne     $s0, $s1, output_comma  # repeat until we reach end of array

output_suffix:
        la      $a0, suffix
        li      $v0, 4
        syscall

        lw      $s1, 0($sp)             # Restore original values of $s0 and $s1
        lw      $s0, 4($sp)
        addi    $sp, $sp, 8

        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
