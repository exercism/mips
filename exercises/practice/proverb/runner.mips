#
# Test recite with some examples
#
# a0 - inputs string, for callee
# a1 - pointer to output string, for callee
# s0 - num of tests left to run
# s1 - address of inputs string
# s2 - address of expected output string
# s3 - copy of output location
# t0 - char byte of expected output
# t1 - char byte of actual output

.eqv BUFFER_SIZE 400

.data

# number of test cases
n:  .word 5
strings:  .ascii
        "nail\n\0",

        "nail\n",
        "shoe\n\0",

        "nail\n",
        "shoe\n",
        "horse\n\0",

        "nail\n",
        "shoe\n",
        "horse\n",
        "rider\n",
        "message\n",
        "battle\n",
        "kingdom\n\0",

        "pin\n",
        "gun\n",
        "soldier\n",
        "battle\n\0"
# expected output values
outs:  .ascii
        "And all for the want of a nail.\n\0",

        "For want of a nail the shoe was lost.\n",
        "And all for the want of a nail.\n\0",

        "For want of a nail the shoe was lost.\n",
        "For want of a shoe the horse was lost.\n",
        "And all for the want of a nail.\n\0",

        "For want of a nail the shoe was lost.\n",
        "For want of a shoe the horse was lost.\n",
        "For want of a horse the rider was lost.\n",
        "For want of a rider the message was lost.\n",
        "For want of a message the battle was lost.\n",
        "For want of a battle the kingdom was lost.\n",
        "And all for the want of a nail.\n\0",

        "For want of a pin the gun was lost.\n",
        "For want of a gun the soldier was lost.\n",
        "For want of a soldier the battle was lost.\n",
        "And all for the want of a pin.\n\0"

failmsg: .asciiz "failed for test inputs\n"
expectedmsg: .asciiz "expected\n"
tobemsg: .asciiz "to be\n"
okmsg: .asciiz "all tests passed"


.text

runner:
        lw      $s0, n
        la      $s1, strings
        la      $s2, outs

        li      $v0, 9                  # code for allocating heap memory
        li      $a0, BUFFER_SIZE        # specify length of longest expected output
        syscall
        move    $s3, $v0                # location of allocated memory is where callee writes result

run_test:
        jal     clear_output            # zero out output location
        move    $a0, $s1                # load input strings value into a0
        move    $a1, $s3                # load destination address into a1
        jal     recite                   # call subroutine under test
        move    $a1, $s3
        move    $s6, $s3                # take copy of output value
        move    $s7, $s2                # expected output

scan:
        lb      $t0, 0($s2)             # load one byte of the expectation
        lb      $t1, 0($a1)             # load one byte of the actual
        bne     $t0, $t1, exit_fail     # if the two differ, the test has failed
        addi    $s2, $s2, 1             # point to next expectation byte
        addi    $a1, $a1, 1             # point to next actual byte
        bne     $t0, $zero, scan        # if one char (and therefore the other) was not null, loop

inputs_scan:
        lb      $t0, 0($s1)
        addi    $s1, $s1, 1
        bne     $t0, $zero, inputs_scan

done_scan:
        sub     $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # print input strings that failed on
        li      $v0, 4
        syscall

        la      $a0, expectedmsg
        li      $v0, 4
        syscall

        move    $a0, $s6                # print actual that failed on
        li      $v0, 4
        syscall

        la      $a0, tobemsg
        li      $v0, 4
        syscall

        move    $a0, $s7                # print expected value that failed on
        li      $v0, 4
        syscall

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


clear_output:
                                        # zero out output by storing zeros
        addi    $t0, $s3, BUFFER_SIZE   # pointer to end of output buffer

clear:
        subi    $t0, $t0, 4             # decrement pointer
        sw      $zero, 0($t0)           # store a 0 word
        bne     $t0, $s3, clear         # repeat util we have reached the start of the buffer
        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
# .include "impl.mips"
