#
# Test measure with some examples
#
# | Register | Type    | Description                                       |
# | -------- | ------- | ------------------------------------------------- |
# | `$a0`    | address | word array with bucket capacities, for callee     |
# | `$a1`    | integer | start bucket (1 or 2), for callee                 |
# | `$a2`    | integer | target volume, for callee                         |
# | `$a3`    | address | word array with final bucket contents, for callee |
# | `$v0`    | integer | number of actions required, -1 if not possible    |
# | `$s0`    | integer | number of tests remaining                         |
# | `$s1`    | address | address of inputs                                 |
# | `$s2`    | address | address for expected outputs                      |

.data

n:  .word 11
ins:  .word
        3, 5, 1, 1,
        3, 5, 2, 1,
        7, 11, 1, 2,
        7, 11, 2, 2,
        1, 3, 2, 3,
        2, 3, 1, 3,
        6, 15, 1, 5,
        6, 15, 1, 9,
        5, 7, 1, 8,
        2129999976, 2121234544, 1, 2112469112,
        2129999976, 2121234544, 2, 2112469112
outs:  .word
        4, 1, 5,
        8, 3, 1,
        14, 2, 11,
        18, 7, 2,
        1, 0, 3,
        2, 2, 3,
        -1, 0, 0,
        10, 0, 9,
        -1, 0, 0,
        962, 2112469112, 2121234544,
        4, 2129999976, 2112469112

failmsg: .asciiz "failed measure from input "
spacemsg: .asciiz " "
expectedmsg: .asciiz ". expected "
tobemsg: .asciiz " to be "
okmsg: .asciiz "all tests passed"
prefix: .asciiz "["
comma: .asciiz ", "
suffix: .asciiz "]"


.text

runner:
        addi    $sp, $sp, -20           # allocate stack space
        lw      $s0, n
        la      $s1, ins                # inputs
        la      $s2, outs               # expected outputs

run_test:
        move    $a0, $sp
        lw      $t0, 0($s1)             # Copy bucket capacities
        sw      $t0, 0($a0)
        lw      $t0, 4($s1)
        sw      $t0, 4($a0)
        lw      $a1, 8($s1)             # start bucket (1 or 2)
        lw      $a2, 12($s1)            # target volume
        addi    $a3, $sp, 12            # address for final contents
        sw      $zero, 0($a3)
        sw      $zero, 4($a3)
        jal     measure
        sw      $v0, 8($sp)             # save return value (number of actions required)

        addi    $a0, $sp, 8             # address of actual outputs
        li      $a1, 3                  # actual number of outputs
        move    $a2, $s2                # address of expected outputs
        li      $a3, 3                  # expected number of outputs
        jal     check_list_match
        bnez    $v0, exit_fail

done_check:
        addi    $s1, $s1, 16            # increment inputs pointer
        addi    $s2, $s2, 12            # increment outputs pointer
        subi    $s0, $s0, 1             # decrement num of tests left to run
        bgt     $s0, $zero, run_test    # if more than zero tests to run, jump to run_test

exit_ok:
        la      $a0, okmsg              # put address of okmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        li      $v0, 10                 # 10 is exit with zero status (clean exit)
        syscall

exit_fail:
        la      $a0, failmsg            # put address of failmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        move    $a0, $s1                # bucket capacities
        li      $a1, 2                  # number of inputs
        jal     print_array

        la      $a0, spacemsg           # put address of spacemsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 8($s1)             # start bucket (1 or 2)
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, spacemsg           # put address of spacemsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 12($s1)            # target volume
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, expectedmsg        # put address of expectedmsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 8($sp)             # load actual number of actions
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, spacemsg           # put address of spacemsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        addi    $a0, $sp, 12            # final bucket contents
        li      $a1, 2                  # number of outputs
        jal     print_array

        la      $a0, tobemsg            # put address of tobemsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        lw      $a0, 0($s2)             # load expected number of actions
        li      $v0, 1                  # 1 is print integer
        syscall

        la      $a0, spacemsg           # put address of spacemsg into a0
        li      $v0, 4                  # 4 is print string
        syscall

        addi    $a0, $s2, 4             # expected final bucket contents
        li      $a1, 2                  # number of outputs
        jal     print_array

        li      $a0, 1                  # set error code to 1
        li      $v0, 17                 # 17 is exit with error
        syscall


check_list_match:
                                        # checks if list with address $a0, word count $a1
                                        # exact match for list with address $a2, word count $a3
                                        # return 0 in $v0 iff the lists match
        bne     $a1, $a3, no_match      # if the actual output length differs, the lists do not match
        beqz    $a3, confirm_match

        move    $t1, $a1
        sll     $t1, $t1, 2             # number of bytes occupied by each list
        add     $t1, $a2, $t1           # end of second list

compare_elements:
        lw      $t0, 0($a0)             # load element from first list
        lw      $t2, 0($a2)             # load element from second list
        bne     $t0, $t2, no_match
        addi    $a0, $a0, 4             # advance pointer into first list
        addi    $a2, $a2, 4             # advance pointer into second list
        bne     $a2, $t1, compare_elements # repeat while there are more list elements

confirm_match:
        li      $v0, 0
        jr      $ra

no_match:
        li      $v0, 1
        jr      $ra


print_array:
                                        # print array with address $a0, word count $a1
                                        # local variable s0 points to current element
                                        # local variable s1 point to end of array

        bltz    $a1, negative_count

        addi    $sp, $sp, -8            # Save existing values of $s0 and $s1
        sw      $s0, 4($sp)
        sw      $s1, 0($sp)

        move    $s0, $a0                # first element of array
        sll     $s1, $a1, 2             # length of array, in bytes
        add     $s1, $a0, $s1           # pointer to end of array

        la      $a0, prefix             # print prefix
        li      $v0, 4
        syscall

        beq     $s0, $s1, output_suffix # jump ahead if array is empty
        j       output_element          # first element is not preceeded by comma

output_comma:
        la      $a0, comma
        li      $v0, 4
        syscall

output_element:
        lw      $a0, 0($s0)             # load element value
        addi    $s0, $s0, 4             # increment pointer
        li      $v0, 1                  # 1 -> "print integer"
        syscall

        bne     $s0, $s1, output_comma  # repeat until we reach end of array

output_suffix:
        la      $a0, suffix
        li      $v0, 4
        syscall

        lw      $s1, 0($sp)             # Restore original values of $s0 and $s1
        lw      $s0, 4($sp)
        addi    $sp, $sp, 8
        jr      $ra

negative_count:
        move    $a0, $a1
        li      $v0, 1                  # 1 -> "print integer"
        syscall
        jr      $ra

# # Include your implementation here if you wish to run this from the MARS GUI.
#.include "impl.mips"
